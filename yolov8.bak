fn main() -> ort::Result<()> {
    tracing_subscriber::fmt::init();

    ort::init()
        .with_execution_providers([ROCmExecutionProvider::default().build()])
        .commit()?;

    let original_img = image::open(Path::new(env!("CARGO_MANIFEST_DIR")).join("data").join("baseball.jpg")).unwrap();
    let (img_width, img_height) = (original_img.width(), original_img.height());
    let img = original_img.resize_exact(640, 640, FilterType::CatmullRom);
    let mut input = Array::zeros((1, 3, 640, 640));
    for pixel in img.pixels() {
        let x = pixel.0 as _;
        let y = pixel.1 as _;
        let [r, g, b, _] = pixel.2.0;
        input[[0, 0, y, x]] = (r as f32) / 255.;
        input[[0, 1, y, x]] = (g as f32) / 255.;
        input[[0, 2, y, x]] = (b as f32) / 255.;
    }
    let model = Session::builder()?.commit_from_file("./yolov8s.onnx")?;

    // Run YOLOv8 inference
    let outputs: SessionOutputs = model.run(inputs!["images" => input.view()]?)?;
    let output = outputs["output0"].try_extract_tensor::<f32>()?.t().into_owned();

    let mut boxes: Vec<ResultBox> = Vec::new();
    let output = output.slice(s![.., .., 0]);
    for row in output.axis_iter(Axis(0)) {
        let row: Vec<_> = row.iter().copied().collect();
        let (class_id, prob) = row
            .iter()
            .skip(4)
            .enumerate()
            .map(|(index, value)| (index, *value))
            .reduce(|accum, row| if row.1 > accum.1 { row } else { accum })
            .unwrap();
        if prob < 0.5 {
            continue;
        }
        let label = YOLOV8_CLASS_LABELS[class_id];
        let xc = row[0] / 640. * (img_width as f32);
        let yc = row[1] / 640. * (img_height as f32);
        let w = row[2] / 640. * (img_width as f32);
        let h = row[3] / 640. * (img_height as f32);
        boxes.push(ResultBox {
            bounding_box: BoundingBox {
                x1: xc - w / 2.,
                y1: yc - h / 2.,
                x2: xc + w / 2.,
                y2: yc + h / 2.,
            },
            label,
            prob,
        });
    }

    boxes.sort_by(|box1, box2| box2.prob.total_cmp(&box1.prob));
    let mut result = Vec::new();

	while !boxes.is_empty() {
        result.push(boxes[0]);
        boxes = boxes
            .iter()
            .filter(|box1| intersection(&result.last().unwrap().bounding_box, &box1.bounding_box) / union(&result.last().unwrap().bounding_box, &box1.bounding_box) < 0.7)
            .cloned()
            .collect::<Vec<ResultBox>>();
    }

    println!("{:?}", result);

    Ok(())
}